datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  teamId        String    @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  invites       Invite[]
  members       Member[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id        String     @id @unique @default(cuid())
  userId    String
  teamId    String
  name      String
  private   Boolean    @default(true)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  feedbacks Feedback[]
}

enum FeedbackType {
  ISSUE
  IDEA
  OTHER
}

model Feedback {
  id            String       @id @unique @default(cuid())
  text          String
  projectId     String
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId        String?
  userAgent     String?
  location      String?
  type          FeedbackType
  screenshotURL String?
  metadata      Json?
  archived      Boolean      @default(false)
  createdAt     DateTime     @default(now())
}

model Member {
  id     String     @id @default(cuid())
  teamId String
  role   MemberRole @default(MEMBER)
  email  String // TODO: remove
  userId String?
  users  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

model Invite {
  id        String     @id @default(cuid())
  email     String
  role      MemberRole @default(MEMBER)
  valid     Boolean    @default(true)
  dueTo     DateTime   @default(now())
  createdAt DateTime   @default(now())
  teamId    String
  userId    String
  user      User       @relation(fields: [userId], references: [id])
}
